generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id              String           @id @default(cuid())
  name            String
  type            OrgType
  parentOrgId     String?          @map("parent_org_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  accounts        Account[]
  auditLogs       AuditLog[]
  carfaxRequests  CarfaxRequest[]
  insuranceClaims InsuranceClaim[]
  invoices        Invoice[]
  journalEntries  JournalEntry[]
  parentOrg       Org?             @relation("OrgHierarchy", fields: [parentOrgId], references: [id])
  childOrgs       Org[]            @relation("OrgHierarchy")
  paymentIntents  PaymentIntent[]
  purchases       Purchase[]
  serviceRequests ServiceRequest[]
  userRoles       UserRole[]
  users           User[]
  vehicleIntakes  VehicleIntake[]
  vehicles        Vehicle[]

  @@map("orgs")
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  name                  String?
  passwordHash          String          @map("password_hash")
  orgId                 String          @map("org_id")
  status                UserStatus      @default(ACTIVE)
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  auditLogs             AuditLog[]
  createdPaymentIntents PaymentIntent[] @relation("PaymentIntentCreator")
  roles                 UserRole[]
  org                   Org             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdIntakes        VehicleIntake[] @relation("IntakeCreatedBy")
  reviewedIntakes       VehicleIntake[] @relation("IntakeReviewedBy")

  @@map("users")
}

model Role {
  id        String     @id @default(cuid())
  key       RoleKey    @unique
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String @map("user_id")
  roleId String @map("role_id")
  orgId  String @map("org_id")
  org    Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, orgId])
  @@map("user_roles")
}

model Invoice {
  id             String          @id @default(cuid())
  orgId          String          @map("org_id")
  number         String
  status         InvoiceStatus   @default(DRAFT)
  currency       String          @default("USD")
  issuedAt       DateTime?       @map("issued_at")
  total          Decimal         @default(0) @db.Decimal(10, 2)
  subtotal       Decimal         @default(0) @db.Decimal(10, 2)
  vat            Decimal         @default(0) @db.Decimal(10, 2)
  notes          String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  lines          InvoiceLine[]
  org            Org             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  paymentIntents PaymentIntent[]

  @@unique([orgId, number])
  @@map("invoices")
}

model InvoiceLine {
  id          String   @id @default(cuid())
  invoiceId   String   @map("invoice_id")
  itemType    String   @map("item_type")
  description String
  qty         Decimal  @default(1) @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  vehicleId   String?  @map("vehicle_id")
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("invoice_lines")
}

model PaymentIntent {
  id              String              @id @default(cuid())
  orgId           String              @map("org_id")
  invoiceId       String?             @map("invoice_id")
  method          String
  amount          Decimal             @db.Decimal(10, 2)
  currency        String              @default("USD")
  status          PaymentIntentStatus @default(SUBMITTED)
  proofUrl        String?             @map("proof_url")
  ref             String?
  createdByUserId String              @map("created_by_user_id")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  version         Int                 @default(0)
  createdBy       User                @relation("PaymentIntentCreator", fields: [createdByUserId], references: [id])
  invoice         Invoice?            @relation(fields: [invoiceId], references: [id])
  org             Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("payment_intents")
}

model Account {
  id           String        @id @default(cuid())
  orgId        String        @map("org_id")
  code         String
  name         String
  currency     String        @default("USD")
  org          Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  journalLines JournalLine[]

  @@unique([orgId, code])
  @@map("accounts")
}

model JournalEntry {
  id        String        @id @default(cuid())
  orgId     String        @map("org_id")
  timestamp DateTime      @default(now())
  memo      String?
  org       Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  lines     JournalLine[]

  @@map("journal_entries")
}

model JournalLine {
  id           String       @id @default(cuid())
  entryId      String       @map("entry_id")
  accountId    String       @map("account_id")
  debit        Decimal      @default(0) @db.Decimal(10, 2)
  credit       Decimal      @default(0) @db.Decimal(10, 2)
  currency     String       @default("USD")
  fxRateToBase Decimal      @default(1) @map("fx_rate_to_base") @db.Decimal(10, 6)
  vehicleId    String?      @map("vehicle_id")
  account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  entry        JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  vehicle      Vehicle?     @relation(fields: [vehicleId], references: [id])

  @@map("journal_lines")
}

model Vehicle {
  id               String                @id @default(cuid())
  orgId            String                @map("org_id")
  vin              String
  make             String?
  model            String?
  year             Int?
  purchasePriceUSD Decimal?              @map("purchase_price_usd") @db.Decimal(10, 2)
  status           VehicleStatus         @default(SOURCING)
  currentStage     String?               @map("current_stage")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  carfaxRequests   CarfaxRequest[]
  insuranceClaims  InsuranceClaim[]
  invoiceLines     InvoiceLine[]
  journalLines     JournalLine[]
  purchases        Purchase[]
  serviceRequests  ServiceRequest[]
  titles           Title[]
  stageHistory     VehicleStageHistory[]
  org              Org                   @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, vin])
  @@map("vehicles")
}

model VehicleStageHistory {
  id        String   @id @default(cuid())
  vehicleId String   @map("vehicle_id")
  stage     String
  at        DateTime @default(now())
  dataJson  Json?    @map("data_json")
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_stage_history")
}

model AuctionLot {
  id          String          @id @default(cuid())
  source      AuctionSource
  lotNumber   String          @map("lot_number")
  locationId  String          @map("location_id")
  vin         String
  detailsJson Json?           @map("details_json")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  location    AuctionLocation @relation(fields: [locationId], references: [id])
  purchases   Purchase[]

  @@unique([source, lotNumber])
  @@map("auction_lots")
}

model Purchase {
  id           String     @id @default(cuid())
  orgId        String     @map("org_id")
  vehicleId    String     @map("vehicle_id")
  auctionLotId String     @map("auction_lot_id")
  finalBidUSD  Decimal    @map("final_bid_usd") @db.Decimal(10, 2)
  feesUSD      Decimal    @map("fees_usd") @db.Decimal(10, 2)
  boughtAt     DateTime   @map("bought_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  auctionLot   AuctionLot @relation(fields: [auctionLotId], references: [id])
  org          Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  vehicle      Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model AuctionLocation {
  id             String          @id @default(cuid())
  auction        AuctionSource
  code           String
  name           String
  state          String?
  country        String          @default("US")
  auctionLots    AuctionLot[]
  towingRules    TowingRule[]
  vehicleIntakes VehicleIntake[]

  @@unique([auction, code])
  @@map("auction_locations")
}

model Port {
  id                  String         @id @default(cuid())
  name                String
  state               String?
  country             String         @default("US")
  code                String?
  shippingRulesExit   ShippingRule[] @relation("ShippingRuleExitPort")
  towingRulesDelivery TowingRule[]   @relation("TowingRuleDeliveryPort")

  @@map("ports")
}

model Shipper {
  id            String         @id @default(cuid())
  name          String
  ruleType      RuleType
  generalFees   GeneralFee[]
  shippingRules ShippingRule[]
  towingRules   TowingRule[]

  @@map("shippers")
}

model VehicleType {
  id         String         @id @default(cuid())
  key        VehicleTypeKey @unique
  multiplier Decimal        @default(1) @db.Decimal(3, 2)
  category   String?

  @@map("vehicle_types")
}

model TowingRule {
  id                String          @id @default(cuid())
  shipperId         String          @map("shipper_id")
  auctionLocationId String          @map("auction_location_id")
  deliveryPortId    String          @map("delivery_port_id")
  ruleType          RuleType        @map("rule_type")
  basePrice         Decimal         @map("base_price") @db.Decimal(10, 2)
  perTypeJson       Json?           @map("per_type_json")
  auctionLocation   AuctionLocation @relation(fields: [auctionLocationId], references: [id], onDelete: Cascade)
  deliveryPort      Port            @relation("TowingRuleDeliveryPort", fields: [deliveryPortId], references: [id], onDelete: Cascade)
  shipper           Shipper         @relation(fields: [shipperId], references: [id], onDelete: Cascade)

  @@unique([shipperId, auctionLocationId, deliveryPortId])
  @@map("towing_rules")
}

model ShippingRule {
  id                 String  @id @default(cuid())
  shipperId          String  @map("shipper_id")
  exitPortId         String  @map("exit_port_id")
  destinationCountry String  @map("destination_country")
  destinationPort    String  @map("destination_port")
  pricingJson        Json?   @map("pricing_json")
  exitPort           Port    @relation("ShippingRuleExitPort", fields: [exitPortId], references: [id], onDelete: Cascade)
  shipper            Shipper @relation(fields: [shipperId], references: [id], onDelete: Cascade)

  @@unique([shipperId, exitPortId, destinationCountry, destinationPort])
  @@map("shipping_rules")
}

model CustomsRule {
  id              String  @id @default(cuid())
  country         String
  vatPct          Decimal @map("vat_pct") @db.Decimal(5, 2)
  dutyPctDefault  Decimal @map("duty_pct_default") @db.Decimal(5, 2)
  serviceFeesJson Json?   @map("service_fees_json")
  formulaVersion  String  @map("formula_version")

  @@unique([country, formulaVersion])
  @@map("customs_rules")
}

model Title {
  id        String      @id @default(cuid())
  vehicleId String      @map("vehicle_id")
  status    TitleStatus @default(pending)
  location  String?
  packageId String?     @map("package_id")
  notes     String?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  package   Package?    @relation(fields: [packageId], references: [id])
  vehicle   Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("titles")
}

model Package {
  id                 String        @id @default(cuid())
  type               PackageType
  trackingNumber     String?       @map("tracking_number")
  provider           String?
  senderContactId    String?       @map("sender_contact_id")
  recipientContactId String?       @map("recipient_contact_id")
  status             PackageStatus @default(PENDING)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  titles             Title[]

  @@map("packages")
}

model ServiceRequest {
  id        String        @id @default(cuid())
  orgId     String        @map("org_id")
  vehicleId String        @map("vehicle_id")
  notes     String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  priceUSD  Decimal?      @map("price_usd") @db.Decimal(18, 2)
  version   Int           @default(0)
  type      ServiceType
  status    ServiceStatus @default(pending)
  org       Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  vehicle   Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("service_requests")
}

model InsuranceClaim {
  id          String      @id @default(cuid())
  orgId       String      @map("org_id")
  vehicleId   String      @map("vehicle_id")
  incidentAt  DateTime?   @map("incident_at")
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  photos      Json?
  version     Int         @default(0)
  status      ClaimStatus @default(new)
  org         Org         @relation(fields: [orgId], references: [id], onDelete: Cascade)
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("insurance_claims")
}

model CarfaxRequest {
  id        String              @id @default(cuid())
  orgId     String              @map("org_id")
  vehicleId String              @map("vehicle_id")
  status    CarfaxRequestStatus @default(PENDING)
  cost      Decimal?            @db.Decimal(10, 2)
  reportUrl String?             @map("report_url")
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  org       Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)
  vehicle   Vehicle             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("carfax_requests")
}

model AuctionFeeMatrix {
  id           String             @id @default(cuid())
  auction      AuctionSource
  accountType  AuctionAccountType @map("account_type")
  title        TitleType
  payment      PaymentType
  bracketsJson Json               @map("brackets_json")
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  @@unique([auction, accountType, title, payment])
  @@map("auction_fee_matrices")
}

model GeneralFee {
  id        String   @id @default(cuid())
  shipperId String?  @map("shipper_id")
  key       String
  value     Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  shipper   Shipper? @relation(fields: [shipperId], references: [id])

  @@unique([shipperId, key])
  @@map("general_fees")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String   @map("actor_user_id")
  orgId       String   @map("org_id")
  action      String
  entity      String
  entityId    String   @map("entity_id")
  diffJson    Json?    @map("diff_json")
  at          DateTime @default(now())
  actor       User     @relation(fields: [actorUserId], references: [id])
  org         Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model IdempotencyKey {
  id         String   @id @default(cuid())
  key        String   @unique
  entityType String   @map("entity_type")
  userId     String   @map("user_id")
  operation  String
  result     String?
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("idempotency_keys")
}

model OutboxEvent {
  id          String            @id @default(cuid())
  type        String
  payloadJson Json              @map("payload_json")
  status      OutboxEventStatus @default(PENDING)
  retries     Int               @default(0)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("outbox_events")
}

model VehicleIntake {
  id                String                    @id @default(cuid())
  orgId             String                    @map("org_id")
  createdById       String                    @map("created_by_id")
  status            IntakeStatus              @default(PENDING)
  auction           AuctionSource
  auctionLot        String?                   @map("auction_lot")
  vin               String
  make              String?
  model             String?
  year              Int?
  purchasePriceUSD  Decimal?                  @map("purchase_price_usd") @db.Decimal(18, 2)
  auctionLocationId String?                   @map("auction_location_id")
  destinationPort   String                    @map("destination_port")
  notes             String?
  createdAt         DateTime                  @default(now()) @map("created_at")
  reviewedAt        DateTime?                 @map("reviewed_at")
  reviewedById      String?                   @map("reviewed_by_id")
  attachments       VehicleIntakeAttachment[]
  auctionLocation   AuctionLocation?          @relation(fields: [auctionLocationId], references: [id])
  createdBy         User                      @relation("IntakeCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  org               Org                       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  reviewedBy        User?                     @relation("IntakeReviewedBy", fields: [reviewedById], references: [id])

  @@map("vehicle_intakes")
}

model VehicleIntakeAttachment {
  id        String         @id @default(cuid())
  intakeId  String         @map("intake_id")
  kind      AttachmentKind
  url       String
  filename  String
  createdAt DateTime       @default(now()) @map("created_at")
  intake    VehicleIntake  @relation(fields: [intakeId], references: [id], onDelete: Cascade)

  @@map("vehicle_intake_attachments")
}

enum OrgType {
  DEALER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RoleKey {
  ADMIN
  ACCOUNTANT
  OPS
  DEALER
  SUBDEALER
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  VOID
}

enum PaymentIntentStatus {
  SUBMITTED
  CONFIRMED
  REJECTED
}

enum VehicleStatus {
  SOURCING
  PURCHASED
  IN_TRANSIT
  AT_PORT
  SHIPPED
  DELIVERED
  SOLD
}

enum AuctionSource {
  COPART
  IAA
}

enum RuleType {
  FLAT
  MULTIPLIER
  CATEGORY
}

enum VehicleTypeKey {
  SEDAN
  SUV
  BIGSUV
  VAN
  PICKUP
}

enum TitleStatus {
  pending
  received
  packed
  sent
}

enum PackageType {
  RECEIVING
  SENDING
}

enum PackageStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  LOST
}

enum ServiceType {
  inspection
  cleaning
  repair
  storage
  titlework
}

enum ServiceStatus {
  pending
  approved
  in_progress
  completed
  rejected
}

enum ClaimStatus {
  new
  review
  approved
  rejected
  paid
}

enum CarfaxRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum AuctionAccountType {
  C
  A
}

enum TitleType {
  CLEAN
  NONCLEAN
}

enum PaymentType {
  SECURED
  UNSECURED
}

enum OutboxEventStatus {
  PENDING
  SENT
  FAILED
}

enum IntakeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttachmentKind {
  INVOICE
  PHOTO
  OTHER
}
