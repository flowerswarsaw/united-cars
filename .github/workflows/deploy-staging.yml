name: Deploy to Staging

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.event.release.tag_name }}

      - name: Set deployment variables
        id: vars
        run: |
          TAG=${{ github.event.inputs.tag || github.event.release.tag_name }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "image_tag=${TAG#v}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "build_id=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runner
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.image_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=20-alpine
            BUILD_ID=${{ steps.vars.outputs.build_id }}
            COMMIT_SHA=${{ steps.vars.outputs.commit_sha }}
            NODE_ENV=production

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Add staging server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh united-cars@${{ secrets.STAGING_HOST }} '
            mkdir -p ~/deployments/${{ steps.vars.outputs.image_tag }}
            mkdir -p ~/united-cars/deploy
          '

      - name: Copy deployment files to server
        run: |
          scp -r deploy/ united-cars@${{ secrets.STAGING_HOST }}:~/united-cars/

      - name: Create environment file
        run: |
          ssh united-cars@${{ secrets.STAGING_HOST }} '
            cd ~/united-cars/deploy/compose/env
            if [ ! -f .staging ]; then
              echo "Creating staging environment file from template..."
              cp .staging.example .staging
              echo "‚ö†Ô∏è  Please update .staging with actual values before deployment"
            fi
          '

      - name: Deploy to staging
        run: |
          ssh united-cars@${{ secrets.STAGING_HOST }} '
            cd ~/united-cars
            export IMAGE_TAG=${{ steps.vars.outputs.image_tag }}
            export BUILD_ID=${{ steps.vars.outputs.build_id }}
            export COMMIT_SHA=${{ steps.vars.outputs.commit_sha }}
            
            echo "üöÄ Starting deployment of ${{ steps.vars.outputs.tag }} to staging..."
            ./deploy/scripts/deploy.sh staging
          '

      - name: Verify deployment
        run: |
          ssh united-cars@${{ secrets.STAGING_HOST }} '
            # Wait for application to be ready
            echo "‚è≥ Waiting for application to be healthy..."
            timeout 300 bash -c "until curl -f http://localhost:3000/api/health; do sleep 5; done"
            
            # Check if services are running
            cd ~/united-cars/deploy/compose
            docker compose -f docker-compose.staging.yml ps
            
            echo "‚úÖ Deployment verification completed"
          '

      - name: Run post-deployment tests
        run: |
          ssh united-cars@${{ secrets.STAGING_HOST }} '
            cd ~/united-cars
            
            # Basic health checks
            curl -f -s http://localhost:3000/api/health
            curl -f -s http://localhost:3000/api/version
            
            # Database connectivity test
            docker compose -f deploy/compose/docker-compose.staging.yml exec -T db pg_isready -U postgres
            
            echo "‚úÖ Post-deployment tests passed"
          '

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
            ssh united-cars@${{ secrets.STAGING_HOST }} "echo '${{ steps.vars.outputs.tag }}' > ~/united-cars/.current-staging-version"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

      - name: Notify deployment result
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üéØ **Staging Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}**
            
            **Release:** ${{ steps.vars.outputs.tag }}
            **Environment:** Staging
            **Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            **URL:** https://${{ secrets.STAGING_DOMAIN }}
            
            ${{ job.status == 'success' && '**Ready for production deployment!**' || '**Please check logs for issues**' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''

  update-staging-status:
    name: Update Staging Status
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()

    steps:
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              target_url: 'https://${{ secrets.STAGING_DOMAIN }}',
              description: 'Staging deployment successful',
              environment: 'staging'
            });
            
            console.log('Deployment status updated:', deployment.data.id);